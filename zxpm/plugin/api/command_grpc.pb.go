// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: command.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandDefinitionClient is the client API for CommandDefinition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandDefinitionClient interface {
	ListCommands(ctx context.Context, in *Command_Request, opts ...grpc.CallOption) (*Command_Response, error)
	RunCommand(ctx context.Context, in *Exec_Request, opts ...grpc.CallOption) (*Exec_Response, error)
}

type commandDefinitionClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandDefinitionClient(cc grpc.ClientConnInterface) CommandDefinitionClient {
	return &commandDefinitionClient{cc}
}

func (c *commandDefinitionClient) ListCommands(ctx context.Context, in *Command_Request, opts ...grpc.CallOption) (*Command_Response, error) {
	out := new(Command_Response)
	err := c.cc.Invoke(ctx, "/zxpm.plugin.CommandDefinition/ListCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandDefinitionClient) RunCommand(ctx context.Context, in *Exec_Request, opts ...grpc.CallOption) (*Exec_Response, error) {
	out := new(Exec_Response)
	err := c.cc.Invoke(ctx, "/zxpm.plugin.CommandDefinition/RunCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandDefinitionServer is the server API for CommandDefinition service.
// All implementations must embed UnimplementedCommandDefinitionServer
// for forward compatibility
type CommandDefinitionServer interface {
	ListCommands(context.Context, *Command_Request) (*Command_Response, error)
	RunCommand(context.Context, *Exec_Request) (*Exec_Response, error)
	mustEmbedUnimplementedCommandDefinitionServer()
}

// UnimplementedCommandDefinitionServer must be embedded to have forward compatible implementations.
type UnimplementedCommandDefinitionServer struct {
}

func (UnimplementedCommandDefinitionServer) ListCommands(context.Context, *Command_Request) (*Command_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommands not implemented")
}
func (UnimplementedCommandDefinitionServer) RunCommand(context.Context, *Exec_Request) (*Exec_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCommand not implemented")
}
func (UnimplementedCommandDefinitionServer) mustEmbedUnimplementedCommandDefinitionServer() {}

// UnsafeCommandDefinitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandDefinitionServer will
// result in compilation errors.
type UnsafeCommandDefinitionServer interface {
	mustEmbedUnimplementedCommandDefinitionServer()
}

func RegisterCommandDefinitionServer(s grpc.ServiceRegistrar, srv CommandDefinitionServer) {
	s.RegisterService(&CommandDefinition_ServiceDesc, srv)
}

func _CommandDefinition_ListCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandDefinitionServer).ListCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zxpm.plugin.CommandDefinition/ListCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandDefinitionServer).ListCommands(ctx, req.(*Command_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandDefinition_RunCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exec_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandDefinitionServer).RunCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zxpm.plugin.CommandDefinition/RunCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandDefinitionServer).RunCommand(ctx, req.(*Exec_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandDefinition_ServiceDesc is the grpc.ServiceDesc for CommandDefinition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandDefinition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zxpm.plugin.CommandDefinition",
	HandlerType: (*CommandDefinitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCommands",
			Handler:    _CommandDefinition_ListCommands_Handler,
		},
		{
			MethodName: "RunCommand",
			Handler:    _CommandDefinition_RunCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}
